# -*- coding: utf-8 -*-

"""
/***************************************************************************
 MobileNetworkDeployment
                                 A QGIS plugin
 uses pysim5G
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-03-12
        copyright            : (C) 2022 by CAMELLonCASE
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'CAMELLonCASE'
__date__ = '2022-03-12'
__copyright__ = '(C) 2022 by CAMELLonCASE'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import processing
from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingParameterVectorLayer,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink)


class AlgorithmRunner:
    """
    Docstring
    """

    def __init__(self, iface=None, parent=None):
        super(AlgorithmRunner, self).__init__()
        self.parent = parent
        self.iface = iface
        if iface:
            self.canvas = iface.mapCanvas()

    def run_reproject_layer(self, input_layer, target_crs, context, feedback=None, output_layer=None):
        output_layer = 'memory:' if output_layer is None else output_layer
        parameters = {
            'INPUT': input_layer,
            'TARGET_CRS': target_crs,
            'OUTPUT': output_layer}
        output = processing.run('native:reprojectlayer',
                                parameters, context=context, feedback=feedback)
        return output['OUTPUT']

    def run_bounding_box_retrieve(self, input_layer, context, feedback=None, output_layer=None):
        """[summary]

        :param input_layer: [description]
        :type input_layer: [type]
        :param context: [description]
        :type context: [type]
        :param feedback: [description], defaults to None
        :type feedback: [type], optional
        :param output_layer: [description], defaults to None
        :type output_layer: [type], optional
        :return: [description]
        :rtype: [type]
        """

        output_layer = 'memory:' if output_layer is None else output_layer
        parameters = {
            'INPUT': input_layer,
            'FIELD': '',
            'TYPE': 1,
            'OUTPUT': output_layer
        }
        output = processing.run("qgis:minimumboundinggeometry",
                                parameters, context=context, feedback=feedback)
        return output['OUTPUT']

    def run_buffer(self, input_layer, distance, context, dissolve=False, end_cap_style=None, join_style=None,
                   segments=None, mitter_limit=None, feedback=None, output_layer=None):
        end_cap_style = 0 if end_cap_style is None else end_cap_style
        join_style = 0 if join_style is None else join_style
        segments = 100 if segments is None else segments
        mitter_limit = 2 if mitter_limit is None else mitter_limit
        output_layer = 'memory:' if output_layer is None else output_layer
        parameters = {
            'INPUT': input_layer,
            'DISTANCE': distance,
            'DISSOLVE': dissolve,
            'END_CAP_STYLE': end_cap_style,
            'JOIN_STYLE': join_style,
            'SEGMENTS': segments,
            'MITER_LIMIT': mitter_limit,
            'OUTPUT': output_layer
        }
        output = processing.run("native:buffer",
                                parameters, context=context, feedback=feedback)
        return output['OUTPUT']
