# -*- coding: utf-8 -*-

"""
/***************************************************************************
 MobileNetworkDeployment
                                 A QGIS plugin
 uses pysim5G
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-03-12
        copyright            : (C) 2022 by CAMELLonCASE
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'CAMELLonCASE'
__date__ = '2022-03-12'
__copyright__ = '(C) 2022 by CAMELLonCASE'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import math

from qgis.core import QgsMessageLog, QgsVectorLayer, QgsGeometry, QgsField, \
    QgsVectorDataProvider, QgsFeatureRequest, QgsExpression, \
    QgsFeature, QgsSpatialIndex, Qgis, QgsCoordinateTransform, \
    QgsWkbTypes, QgsProject, QgsVertexId, Qgis, QgsCoordinateReferenceSystem
from qgis.PyQt.Qt import QObject


class GeometryHandler(QObject):

    def __init__(self, iface=None, parent=None):
        super(GeometryHandler, self).__init__()
        self.parent = parent
        self.iface = iface
        if self.iface:
            self.canvas = iface.mapCanvas()

    def calculate_polygons(self, startx, starty, endx, endy, radius):
        #startx, starty, endx, endy -> boundingbox
        """

        Calculate a grid of hexagon coordinates of the given radius
        given lower-left and upper-right coordinates. Returns a
        list of lists containing 6 tuples of x, y point coordinates.
        These can be used to construct valid regular hexagonal polygons
        Projected coordinates are advised.

        Parameters
        ----------
        startx : float
            Starting coordinate x.
        starty : float
            Starting coordinate y.
        endx : float
            Ending coordinate x.
        endy : float
            Ending coordinate y.
        radius : int
            Given radius of site areas.

        Returns
        -------
        polygons : list of lists
            A list containing multiple polygons. Each individual polygon
            is a list of tuple coordinates.

        """
        # calculate side length given radius
        sl = (2 * radius) * math.tan(math.pi / 6)

        # calculate radius for a given side-length
        # (a * (math.cos(math.pi / 6) / math.sin(math.pi / 6)) / 2)
        # see http://www.calculatorsoup.com/calculators/geometry-plane/polygon.php

        # calculate coordinates of the hexagon points
        # sin(30)
        p = sl * 0.5
        b = sl * math.cos(math.radians(30))
        w = b * 2
        h = 2 * sl

        # offset start and end coordinates by hex widths and heights to guarantee
        # coverage
        startx = startx - w
        starty = starty - h
        endx = endx + w
        endy = endy + h

        origx = startx
        origy = starty

        # offsets for moving along and up rows
        xoffset = b
        yoffset = 3 * p

        polygons = []
        row = 1
        counter = 0

        while starty < endy:

            if row % 2 == 0:
                startx = origx + xoffset

            else:
                startx = origx

            while startx < endx:
                p1x = startx
                p1y = starty + p
                p2x = startx
                p2y = starty + (3 * p)
                p3x = startx + b
                p3y = starty + h
                p4x = startx + w
                p4y = starty + (3 * p)
                p5x = startx + w
                p5y = starty + p
                p6x = startx + b
                p6y = starty
                poly = [
                    (p1x, p1y),
                    (p2x, p2y),
                    (p3x, p3y),
                    (p4x, p4y),
                    (p5x, p5y),
                    (p6x, p6y),
                    (p1x, p1y)]

                polygons.append(poly)

                counter += 1
                startx += w

            starty += yoffset
            row += 1

        return polygons
