# -*- coding: utf-8 -*-

"""
/***************************************************************************
 MobileNetworkDeployment
                                 A QGIS plugin
 uses pysim5G
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-03-12
        copyright            : (C) 2022 by CAMELLonCASE
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'CAMELLonCASE'
__date__ = '2022-03-12'
__copyright__ = '(C) 2022 by CAMELLonCASE'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

COSTS = {
    # all costs in $USD
    'single_sector_antenna': 1500,
    'single_remote_radio_unit': 4000,
    'single_baseband_unit': 10000,
    'tower': 10000,
    'civil_materials': 5000,
    'transportation': 10000,
    'installation': 5000,
    'site_rental': 9600,
    'power_generator_battery_system': 5000,
    'high_speed_backhaul_hub': 15000,
    'router': 2000,
}

SPECTRUM_PORTFOLIO = [
    # frequency, bandwidth, generation, transmission_type
    (0.7, 10, '5G', '1x1'),
    (0.8, 10, '4G', '1x1'),
    (1.8, 10, '4G', '1x1'),
    (2.6, 10, '4G', '1x1'),
    (3.5, 40, '5G', '1x1'),
    # (3.7, 25, '5G'),
    (26, 100, '5G', '1x1'),
]

ANT_TYPE = [
    ('macro'),
    ('micro'),
]

MODULATION_AND_CODING_LUT = [
    # ETSI. 2018. ‘5G; NR; Physical Layer Procedures for Data
    # (3GPP TS 38.214 Version 15.3.0 Release 15)’. Valbonne, France: ETSI.
    # Generation MIMO CQI Index	Modulation	Coding rate
    # Spectral efficiency (bps/Hz) SINR estimate (dB)
    ('4G', '1x1', 1, 'QPSK', 78, 0.1523, -6.7),
    ('4G', '1x1', 2, 'QPSK', 120, 0.2344, -4.7),
    ('4G', '1x1', 3, 'QPSK', 193, 0.377, -2.3),
    ('4G', '1x1', 4, 'QPSK', 308, 0.6016, 0.2),
    ('4G', '1x1', 5, 'QPSK', 449, 0.877, 2.4),
    ('4G', '1x1', 6, 'QPSK', 602, 1.1758, 4.3),
    ('4G', '1x1', 7, '16QAM', 378, 1.4766, 5.9),
    ('4G', '1x1', 8, '16QAM', 490, 1.9141, 8.1),
    ('4G', '1x1', 9, '16QAM', 616, 2.4063, 10.3),
    ('4G', '1x1', 10, '64QAM', 466, 2.7305, 11.7),
    ('4G', '1x1', 11, '64QAM', 567, 3.3223, 14.1),
    ('4G', '1x1', 12, '64QAM', 666, 3.9023, 16.3),
    ('4G', '1x1', 13, '64QAM', 772, 4.5234, 18.7),
    ('4G', '1x1', 14, '64QAM', 973, 5.1152, 21),
    ('4G', '1x1', 15, '64QAM', 948, 5.5547, 22.7),
    ('5G', '8x8', 1, 'QPSK', 78, 0.30, -6.7),
    ('5G', '8x8', 2, 'QPSK', 193, 2.05, -4.7),
    ('5G', '8x8', 3, 'QPSK', 449, 4.42, -2.3),
    ('5G', '8x8', 4, '16QAM', 378, 6.40, 0.2),
    ('5G', '8x8', 5, '16QAM', 490, 8.00, 2.4),
    ('5G', '8x8', 6, '16QAM', 616, 10.82, 4.3),
    ('5G', '8x8', 7, '64QAM', 466, 12.40, 5.9),
    ('5G', '8x8', 8, '64QAM', 567, 16.00, 8.1),
    ('5G', '8x8', 9, '64QAM', 666, 19.00, 10.3),
    ('5G', '8x8', 10, '64QAM', 772, 22.00, 11.7),
    ('5G', '8x8', 11, '64QAM', 873, 28.00, 14.1),
    ('5G', '8x8', 12, '256QAM', 711, 32.00, 16.3),
    ('5G', '8x8', 13, '256QAM', 797, 38.00, 18.7),
    ('5G', '8x8', 14, '256QAM', 885, 44.00, 21),
    ('5G', '8x8', 15, '256QAM', 948, 50.00, 22.7),
]

CONFIDENCE_INTERVALS = [
    5,
    50,
    95,
]


def generate_site_radii(min_radius, max_radius, increment):
    for radius in range(min_radius, max_radius, increment):
        yield radius


INCREMENT_MA = (400, 30400, 2000)  # (5000, 5500, 500) (400, 30400, 1000)
INCREMENT_MI = (25, 500, 25)  # (40, 540, 80) (300, 400, 100)

SITE_RADII = {
    'macro': {
        'urban':
            generate_site_radii(INCREMENT_MA[0], INCREMENT_MA[1], INCREMENT_MA[2]),
        'suburban':
            generate_site_radii(INCREMENT_MA[0], INCREMENT_MA[1], INCREMENT_MA[2]),
        'rural':
            generate_site_radii(INCREMENT_MA[0], INCREMENT_MA[1], INCREMENT_MA[2])
    },
    'micro': {
        'urban':
            generate_site_radii(INCREMENT_MI[0], INCREMENT_MI[1], INCREMENT_MI[2]),
        'suburban':
            generate_site_radii(INCREMENT_MI[0], INCREMENT_MI[1], INCREMENT_MI[2]),
        'rural':
            generate_site_radii(INCREMENT_MI[0], INCREMENT_MI[1], INCREMENT_MI[2])
    },
}
